<?php
/**
 * CountdownTimerProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * CountdownTimerProperties Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CountdownTimerProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CountdownTimerProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_device' => 'string[]',
        'clock_face' => 'string',
        'animation' => 'string',
        'configuration' => '\KlaviyoAPI\Model\CountdownTimerPropertiesConfiguration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_device' => null,
        'clock_face' => null,
        'animation' => null,
        'configuration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'display_device' => false,
        'clock_face' => false,
        'animation' => true,
        'configuration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_device' => 'display_device',
        'clock_face' => 'clock_face',
        'animation' => 'animation',
        'configuration' => 'configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_device' => 'setDisplayDevice',
        'clock_face' => 'setClockFace',
        'animation' => 'setAnimation',
        'configuration' => 'setConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_device' => 'getDisplayDevice',
        'clock_face' => 'getClockFace',
        'animation' => 'getAnimation',
        'configuration' => 'getConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DISPLAY_DEVICE_BOTH = 'both';
    public const DISPLAY_DEVICE_DESKTOP = 'desktop';
    public const DISPLAY_DEVICE_MOBILE = 'mobile';
    public const CLOCK_FACE_FLIP = 'flip';
    public const CLOCK_FACE_SIMPLE = 'simple';
    public const ANIMATION_FLASH = 'flash';
    public const ANIMATION_HEARTBEAT = 'heartbeat';
    public const ANIMATION_PULSE = 'pulse';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayDeviceAllowableValues()
    {
        return [
            self::DISPLAY_DEVICE_BOTH,
            self::DISPLAY_DEVICE_DESKTOP,
            self::DISPLAY_DEVICE_MOBILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClockFaceAllowableValues()
    {
        return [
            self::CLOCK_FACE_FLIP,
            self::CLOCK_FACE_SIMPLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAnimationAllowableValues()
    {
        return [
            self::ANIMATION_FLASH,
            self::ANIMATION_HEARTBEAT,
            self::ANIMATION_PULSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('display_device', $data ?? [], null);
        $this->setIfExists('clock_face', $data ?? [], 'simple');
        $this->setIfExists('animation', $data ?? [], 'heartbeat');
        $this->setIfExists('configuration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getClockFaceAllowableValues();
        if (!is_null($this->container['clock_face']) && !in_array($this->container['clock_face'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'clock_face', must be one of '%s'",
                $this->container['clock_face'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAnimationAllowableValues();
        if (!is_null($this->container['animation']) && !in_array($this->container['animation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'animation', must be one of '%s'",
                $this->container['animation'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['configuration'] === null) {
            $invalidProperties[] = "'configuration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_device
     *
     * @return string[]|null
     */
    public function getDisplayDevice()
    {
        return $this->container['display_device'];
    }

    /**
     * Sets display_device
     *
     * @param string[]|null $display_device display_device
     *
     * @return self
     */
    public function setDisplayDevice($display_device)
    {
        if (is_null($display_device)) {
            throw new \InvalidArgumentException('non-nullable display_device cannot be null');
        }
        $allowedValues = $this->getDisplayDeviceAllowableValues();
        if (array_diff($display_device, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'display_device', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_device'] = $display_device;

        return $this;
    }

    /**
     * Gets clock_face
     *
     * @return string|null
     */
    public function getClockFace()
    {
        return $this->container['clock_face'];
    }

    /**
     * Sets clock_face
     *
     * @param string|null $clock_face Options for displaying a timer.
     *
     * @return self
     */
    public function setClockFace($clock_face)
    {
        if (is_null($clock_face)) {
            throw new \InvalidArgumentException('non-nullable clock_face cannot be null');
        }
        $allowedValues = $this->getClockFaceAllowableValues();
        if (!in_array($clock_face, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'clock_face', must be one of '%s'",
                    $clock_face,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['clock_face'] = $clock_face;

        return $this;
    }

    /**
     * Gets animation
     *
     * @return string|null
     */
    public function getAnimation()
    {
        return $this->container['animation'];
    }

    /**
     * Sets animation
     *
     * @param string|null $animation Options for timer completion animations.
     *
     * @return self
     */
    public function setAnimation($animation)
    {
        if (is_null($animation)) {
            array_push($this->openAPINullablesSetToNull, 'animation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('animation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAnimationAllowableValues();
        if (!is_null($animation) && !in_array($animation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'animation', must be one of '%s'",
                    $animation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['animation'] = $animation;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \KlaviyoAPI\Model\CountdownTimerPropertiesConfiguration
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \KlaviyoAPI\Model\CountdownTimerPropertiesConfiguration $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        if (is_null($configuration)) {
            throw new \InvalidArgumentException('non-nullable configuration cannot be null');
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


