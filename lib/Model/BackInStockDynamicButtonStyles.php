<?php
/**
 * BackInStockDynamicButtonStyles
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * BackInStockDynamicButtonStyles Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackInStockDynamicButtonStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackInStockDynamicButtonStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'color' => 'string',
        'border_radius' => 'int',
        'height' => 'int',
        'width' => 'string',
        'alignment' => 'string',
        'border' => '\KlaviyoAPI\Model\BackInStockDynamicButtonBorderStyles',
        'drop_shadow' => '\KlaviyoAPI\Model\BackInStockDynamicButtonDropShadowStyles'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'color' => null,
        'border_radius' => null,
        'height' => null,
        'width' => null,
        'alignment' => null,
        'border' => null,
        'drop_shadow' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'color' => false,
        'border_radius' => false,
        'height' => false,
        'width' => false,
        'alignment' => false,
        'border' => false,
        'drop_shadow' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'color' => 'color',
        'border_radius' => 'border_radius',
        'height' => 'height',
        'width' => 'width',
        'alignment' => 'alignment',
        'border' => 'border',
        'drop_shadow' => 'drop_shadow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'color' => 'setColor',
        'border_radius' => 'setBorderRadius',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'alignment' => 'setAlignment',
        'border' => 'setBorder',
        'drop_shadow' => 'setDropShadow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'color' => 'getColor',
        'border_radius' => 'getBorderRadius',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'alignment' => 'getAlignment',
        'border' => 'getBorder',
        'drop_shadow' => 'getDropShadow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WIDTH_FIT_TO_TEXT = 'fitToText';
    public const WIDTH_FULL_WIDTH = 'fullWidth';
    public const ALIGNMENT_CENTER = 'center';
    public const ALIGNMENT_LEFT = 'left';
    public const ALIGNMENT_RIGHT = 'right';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWidthAllowableValues()
    {
        return [
            self::WIDTH_FIT_TO_TEXT,
            self::WIDTH_FULL_WIDTH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlignmentAllowableValues()
    {
        return [
            self::ALIGNMENT_CENTER,
            self::ALIGNMENT_LEFT,
            self::ALIGNMENT_RIGHT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('color', $data ?? [], '#000000');
        $this->setIfExists('border_radius', $data ?? [], 0);
        $this->setIfExists('height', $data ?? [], 44);
        $this->setIfExists('width', $data ?? [], 'fullWidth');
        $this->setIfExists('alignment', $data ?? [], 'center');
        $this->setIfExists('border', $data ?? [], null);
        $this->setIfExists('drop_shadow', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWidthAllowableValues();
        if (!is_null($this->container['width']) && !in_array($this->container['width'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'width', must be one of '%s'",
                $this->container['width'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAlignmentAllowableValues();
        if (!is_null($this->container['alignment']) && !in_array($this->container['alignment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'alignment', must be one of '%s'",
                $this->container['alignment'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets border_radius
     *
     * @return int|null
     */
    public function getBorderRadius()
    {
        return $this->container['border_radius'];
    }

    /**
     * Sets border_radius
     *
     * @param int|null $border_radius border_radius
     *
     * @return self
     */
    public function setBorderRadius($border_radius)
    {
        if (is_null($border_radius)) {
            throw new \InvalidArgumentException('non-nullable border_radius cannot be null');
        }
        $this->container['border_radius'] = $border_radius;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width Back In Stock Dynamic Button display type enumeration.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $allowedValues = $this->getWidthAllowableValues();
        if (!in_array($width, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'width', must be one of '%s'",
                    $width,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets alignment
     *
     * @return string|null
     */
    public function getAlignment()
    {
        return $this->container['alignment'];
    }

    /**
     * Sets alignment
     *
     * @param string|null $alignment Horizontal alignment enumeration.
     *
     * @return self
     */
    public function setAlignment($alignment)
    {
        if (is_null($alignment)) {
            throw new \InvalidArgumentException('non-nullable alignment cannot be null');
        }
        $allowedValues = $this->getAlignmentAllowableValues();
        if (!in_array($alignment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'alignment', must be one of '%s'",
                    $alignment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alignment'] = $alignment;

        return $this;
    }

    /**
     * Gets border
     *
     * @return \KlaviyoAPI\Model\BackInStockDynamicButtonBorderStyles|null
     */
    public function getBorder()
    {
        return $this->container['border'];
    }

    /**
     * Sets border
     *
     * @param \KlaviyoAPI\Model\BackInStockDynamicButtonBorderStyles|null $border border
     *
     * @return self
     */
    public function setBorder($border)
    {
        if (is_null($border)) {
            throw new \InvalidArgumentException('non-nullable border cannot be null');
        }
        $this->container['border'] = $border;

        return $this;
    }

    /**
     * Gets drop_shadow
     *
     * @return \KlaviyoAPI\Model\BackInStockDynamicButtonDropShadowStyles|null
     */
    public function getDropShadow()
    {
        return $this->container['drop_shadow'];
    }

    /**
     * Sets drop_shadow
     *
     * @param \KlaviyoAPI\Model\BackInStockDynamicButtonDropShadowStyles|null $drop_shadow drop_shadow
     *
     * @return self
     */
    public function setDropShadow($drop_shadow)
    {
        if (is_null($drop_shadow)) {
            throw new \InvalidArgumentException('non-nullable drop_shadow cannot be null');
        }
        $this->container['drop_shadow'] = $drop_shadow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


