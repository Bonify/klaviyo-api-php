<?php
/**
 * BackInStockEmailConsentCheckboxProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * BackInStockEmailConsentCheckboxProperties Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackInStockEmailConsentCheckboxProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackInStockEmailConsentCheckboxProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_device' => 'string[]',
        'label' => 'string',
        'show_label' => 'bool',
        'error_messages' => '\KlaviyoAPI\Model\ErrorMessages',
        'required' => 'bool',
        'property_name' => '\KlaviyoAPI\Model\OptInPromotionalEmailEnum',
        'checkbox_text' => 'string',
        'placeholder' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_device' => null,
        'label' => null,
        'show_label' => null,
        'error_messages' => null,
        'required' => null,
        'property_name' => null,
        'checkbox_text' => null,
        'placeholder' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'display_device' => false,
        'label' => true,
        'show_label' => false,
        'error_messages' => false,
        'required' => false,
        'property_name' => false,
        'checkbox_text' => false,
        'placeholder' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_device' => 'display_device',
        'label' => 'label',
        'show_label' => 'show_label',
        'error_messages' => 'error_messages',
        'required' => 'required',
        'property_name' => 'property_name',
        'checkbox_text' => 'checkbox_text',
        'placeholder' => 'placeholder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_device' => 'setDisplayDevice',
        'label' => 'setLabel',
        'show_label' => 'setShowLabel',
        'error_messages' => 'setErrorMessages',
        'required' => 'setRequired',
        'property_name' => 'setPropertyName',
        'checkbox_text' => 'setCheckboxText',
        'placeholder' => 'setPlaceholder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_device' => 'getDisplayDevice',
        'label' => 'getLabel',
        'show_label' => 'getShowLabel',
        'error_messages' => 'getErrorMessages',
        'required' => 'getRequired',
        'property_name' => 'getPropertyName',
        'checkbox_text' => 'getCheckboxText',
        'placeholder' => 'getPlaceholder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DISPLAY_DEVICE_BOTH = 'both';
    public const DISPLAY_DEVICE_DESKTOP = 'desktop';
    public const DISPLAY_DEVICE_MOBILE = 'mobile';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayDeviceAllowableValues()
    {
        return [
            self::DISPLAY_DEVICE_BOTH,
            self::DISPLAY_DEVICE_DESKTOP,
            self::DISPLAY_DEVICE_MOBILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlaceholderAllowableValues()
    {
        return [
            
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('display_device', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('show_label', $data ?? [], false);
        $this->setIfExists('error_messages', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], false);
        $this->setIfExists('property_name', $data ?? [], null);
        $this->setIfExists('checkbox_text', $data ?? [], null);
        $this->setIfExists('placeholder', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['checkbox_text'] === null) {
            $invalidProperties[] = "'checkbox_text' can't be null";
        }
        $allowedValues = $this->getPlaceholderAllowableValues();
        if (!is_null($this->container['placeholder']) && !in_array($this->container['placeholder'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'placeholder', must be one of '%s'",
                $this->container['placeholder'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_device
     *
     * @return string[]|null
     */
    public function getDisplayDevice()
    {
        return $this->container['display_device'];
    }

    /**
     * Sets display_device
     *
     * @param string[]|null $display_device display_device
     *
     * @return self
     */
    public function setDisplayDevice($display_device)
    {
        if (is_null($display_device)) {
            throw new \InvalidArgumentException('non-nullable display_device cannot be null');
        }
        $allowedValues = $this->getDisplayDeviceAllowableValues();
        if (array_diff($display_device, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'display_device', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_device'] = $display_device;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets show_label
     *
     * @return bool|null
     */
    public function getShowLabel()
    {
        return $this->container['show_label'];
    }

    /**
     * Sets show_label
     *
     * @param bool|null $show_label show_label
     *
     * @return self
     */
    public function setShowLabel($show_label)
    {
        if (is_null($show_label)) {
            throw new \InvalidArgumentException('non-nullable show_label cannot be null');
        }
        $this->container['show_label'] = $show_label;

        return $this;
    }

    /**
     * Gets error_messages
     *
     * @return \KlaviyoAPI\Model\ErrorMessages|null
     */
    public function getErrorMessages()
    {
        return $this->container['error_messages'];
    }

    /**
     * Sets error_messages
     *
     * @param \KlaviyoAPI\Model\ErrorMessages|null $error_messages error_messages
     *
     * @return self
     */
    public function setErrorMessages($error_messages)
    {
        if (is_null($error_messages)) {
            throw new \InvalidArgumentException('non-nullable error_messages cannot be null');
        }
        $this->container['error_messages'] = $error_messages;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return \KlaviyoAPI\Model\OptInPromotionalEmailEnum|null
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param \KlaviyoAPI\Model\OptInPromotionalEmailEnum|null $property_name property_name
     *
     * @return self
     */
    public function setPropertyName($property_name)
    {
        if (is_null($property_name)) {
            throw new \InvalidArgumentException('non-nullable property_name cannot be null');
        }
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets checkbox_text
     *
     * @return string
     */
    public function getCheckboxText()
    {
        return $this->container['checkbox_text'];
    }

    /**
     * Sets checkbox_text
     *
     * @param string $checkbox_text checkbox_text
     *
     * @return self
     */
    public function setCheckboxText($checkbox_text)
    {
        if (is_null($checkbox_text)) {
            throw new \InvalidArgumentException('non-nullable checkbox_text cannot be null');
        }
        $this->container['checkbox_text'] = $checkbox_text;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string|null $placeholder placeholder
     *
     * @return self
     */
    public function setPlaceholder($placeholder)
    {
        if (is_null($placeholder)) {
            array_push($this->openAPINullablesSetToNull, 'placeholder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('placeholder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPlaceholderAllowableValues();
        if (!is_null($placeholder) && !in_array($placeholder, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'placeholder', must be one of '%s'",
                    $placeholder,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['placeholder'] = $placeholder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


