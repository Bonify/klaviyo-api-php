<?php
/**
 * Version
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * Version Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Version implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Version';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'steps' => '\KlaviyoAPI\Model\Step[]',
        'triggers' => '\KlaviyoAPI\Model\VersionTriggersInner[]',
        'teasers' => '\KlaviyoAPI\Model\Teaser[]',
        'dynamic_button' => '\KlaviyoAPI\Model\DynamicButton',
        'name' => 'string',
        'styles' => '\KlaviyoAPI\Model\VersionStyles',
        'properties' => '\KlaviyoAPI\Model\VersionProperties',
        'type' => 'string',
        'location' => 'string',
        'status' => 'string',
        'ab_test' => 'bool',
        'specialties' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'steps' => null,
        'triggers' => null,
        'teasers' => null,
        'dynamic_button' => null,
        'name' => null,
        'styles' => null,
        'properties' => null,
        'type' => null,
        'location' => null,
        'status' => null,
        'ab_test' => null,
        'specialties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'steps' => false,
        'triggers' => false,
        'teasers' => false,
        'dynamic_button' => false,
        'name' => true,
        'styles' => false,
        'properties' => false,
        'type' => false,
        'location' => true,
        'status' => false,
        'ab_test' => false,
        'specialties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'steps' => 'steps',
        'triggers' => 'triggers',
        'teasers' => 'teasers',
        'dynamic_button' => 'dynamic_button',
        'name' => 'name',
        'styles' => 'styles',
        'properties' => 'properties',
        'type' => 'type',
        'location' => 'location',
        'status' => 'status',
        'ab_test' => 'ab_test',
        'specialties' => 'specialties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'steps' => 'setSteps',
        'triggers' => 'setTriggers',
        'teasers' => 'setTeasers',
        'dynamic_button' => 'setDynamicButton',
        'name' => 'setName',
        'styles' => 'setStyles',
        'properties' => 'setProperties',
        'type' => 'setType',
        'location' => 'setLocation',
        'status' => 'setStatus',
        'ab_test' => 'setAbTest',
        'specialties' => 'setSpecialties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'steps' => 'getSteps',
        'triggers' => 'getTriggers',
        'teasers' => 'getTeasers',
        'dynamic_button' => 'getDynamicButton',
        'name' => 'getName',
        'styles' => 'getStyles',
        'properties' => 'getProperties',
        'type' => 'getType',
        'location' => 'getLocation',
        'status' => 'getStatus',
        'ab_test' => 'getAbTest',
        'specialties' => 'getSpecialties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_BANNER = 'banner';
    public const TYPE_EMBED = 'embed';
    public const TYPE_FLYOUT = 'flyout';
    public const TYPE_FULL_SCREEN = 'full_screen';
    public const TYPE_POPUP = 'popup';
    public const LOCATION_BOTTOM_CENTER = 'bottom_center';
    public const LOCATION_BOTTOM_LEFT = 'bottom_left';
    public const LOCATION_BOTTOM_RIGHT = 'bottom_right';
    public const LOCATION_CENTER_LEFT = 'center_left';
    public const LOCATION_CENTER_RIGHT = 'center_right';
    public const LOCATION_TOP_CENTER = 'top_center';
    public const LOCATION_TOP_LEFT = 'top_left';
    public const LOCATION_TOP_RIGHT = 'top_right';
    public const STATUS_DRAFT = 'draft';
    public const STATUS_LIVE = 'live';
    public const SPECIALTIES_BACK_IN_STOCK = 'BACK_IN_STOCK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BANNER,
            self::TYPE_EMBED,
            self::TYPE_FLYOUT,
            self::TYPE_FULL_SCREEN,
            self::TYPE_POPUP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationAllowableValues()
    {
        return [
            self::LOCATION_BOTTOM_CENTER,
            self::LOCATION_BOTTOM_LEFT,
            self::LOCATION_BOTTOM_RIGHT,
            self::LOCATION_CENTER_LEFT,
            self::LOCATION_CENTER_RIGHT,
            self::LOCATION_TOP_CENTER,
            self::LOCATION_TOP_LEFT,
            self::LOCATION_TOP_RIGHT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_LIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecialtiesAllowableValues()
    {
        return [
            self::SPECIALTIES_BACK_IN_STOCK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('triggers', $data ?? [], null);
        $this->setIfExists('teasers', $data ?? [], null);
        $this->setIfExists('dynamic_button', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('styles', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'popup');
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'draft');
        $this->setIfExists('ab_test', $data ?? [], false);
        $this->setIfExists('specialties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocationAllowableValues();
        if (!is_null($this->container['location']) && !in_array($this->container['location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'location', must be one of '%s'",
                $this->container['location'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \KlaviyoAPI\Model\Step[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \KlaviyoAPI\Model\Step[] $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return \KlaviyoAPI\Model\VersionTriggersInner[]|null
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param \KlaviyoAPI\Model\VersionTriggersInner[]|null $triggers triggers
     *
     * @return self
     */
    public function setTriggers($triggers)
    {
        if (is_null($triggers)) {
            throw new \InvalidArgumentException('non-nullable triggers cannot be null');
        }
        $this->container['triggers'] = $triggers;

        return $this;
    }

    /**
     * Gets teasers
     *
     * @return \KlaviyoAPI\Model\Teaser[]|null
     */
    public function getTeasers()
    {
        return $this->container['teasers'];
    }

    /**
     * Sets teasers
     *
     * @param \KlaviyoAPI\Model\Teaser[]|null $teasers teasers
     *
     * @return self
     */
    public function setTeasers($teasers)
    {
        if (is_null($teasers)) {
            throw new \InvalidArgumentException('non-nullable teasers cannot be null');
        }
        $this->container['teasers'] = $teasers;

        return $this;
    }

    /**
     * Gets dynamic_button
     *
     * @return \KlaviyoAPI\Model\DynamicButton|null
     */
    public function getDynamicButton()
    {
        return $this->container['dynamic_button'];
    }

    /**
     * Sets dynamic_button
     *
     * @param \KlaviyoAPI\Model\DynamicButton|null $dynamic_button dynamic_button
     *
     * @return self
     */
    public function setDynamicButton($dynamic_button)
    {
        if (is_null($dynamic_button)) {
            throw new \InvalidArgumentException('non-nullable dynamic_button cannot be null');
        }
        $this->container['dynamic_button'] = $dynamic_button;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return \KlaviyoAPI\Model\VersionStyles|null
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param \KlaviyoAPI\Model\VersionStyles|null $styles styles
     *
     * @return self
     */
    public function setStyles($styles)
    {
        if (is_null($styles)) {
            throw new \InvalidArgumentException('non-nullable styles cannot be null');
        }
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \KlaviyoAPI\Model\VersionProperties|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \KlaviyoAPI\Model\VersionProperties|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Form type enumeration.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Display location enumeration.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getLocationAllowableValues();
        if (!is_null($location) && !in_array($location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'location', must be one of '%s'",
                    $location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Form status enumeration.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ab_test
     *
     * @return bool|null
     */
    public function getAbTest()
    {
        return $this->container['ab_test'];
    }

    /**
     * Sets ab_test
     *
     * @param bool|null $ab_test ab_test
     *
     * @return self
     */
    public function setAbTest($ab_test)
    {
        if (is_null($ab_test)) {
            throw new \InvalidArgumentException('non-nullable ab_test cannot be null');
        }
        $this->container['ab_test'] = $ab_test;

        return $this;
    }

    /**
     * Gets specialties
     *
     * @return string[]|null
     */
    public function getSpecialties()
    {
        return $this->container['specialties'];
    }

    /**
     * Sets specialties
     *
     * @param string[]|null $specialties specialties
     *
     * @return self
     */
    public function setSpecialties($specialties)
    {
        if (is_null($specialties)) {
            throw new \InvalidArgumentException('non-nullable specialties cannot be null');
        }
        $allowedValues = $this->getSpecialtiesAllowableValues();
        if (array_diff($specialties, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'specialties', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['specialties'] = $specialties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


