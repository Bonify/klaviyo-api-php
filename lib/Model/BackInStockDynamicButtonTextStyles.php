<?php
/**
 * BackInStockDynamicButtonTextStyles
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * BackInStockDynamicButtonTextStyles Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BackInStockDynamicButtonTextStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BackInStockDynamicButtonTextStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'font_family' => '\KlaviyoAPI\Model\TextStyleFontFamily',
        'font_size' => 'int',
        'font_weight' => 'int',
        'font_color' => 'string',
        'font_style' => 'string',
        'text_decoration' => 'string',
        'letter_spacing' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'font_family' => null,
        'font_size' => null,
        'font_weight' => null,
        'font_color' => null,
        'font_style' => null,
        'text_decoration' => null,
        'letter_spacing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'font_family' => false,
        'font_size' => false,
        'font_weight' => false,
        'font_color' => false,
        'font_style' => true,
        'text_decoration' => true,
        'letter_spacing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'font_family' => 'font_family',
        'font_size' => 'font_size',
        'font_weight' => 'font_weight',
        'font_color' => 'font_color',
        'font_style' => 'font_style',
        'text_decoration' => 'text_decoration',
        'letter_spacing' => 'letter_spacing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'font_family' => 'setFontFamily',
        'font_size' => 'setFontSize',
        'font_weight' => 'setFontWeight',
        'font_color' => 'setFontColor',
        'font_style' => 'setFontStyle',
        'text_decoration' => 'setTextDecoration',
        'letter_spacing' => 'setLetterSpacing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'font_family' => 'getFontFamily',
        'font_size' => 'getFontSize',
        'font_weight' => 'getFontWeight',
        'font_color' => 'getFontColor',
        'font_style' => 'getFontStyle',
        'text_decoration' => 'getTextDecoration',
        'letter_spacing' => 'getLetterSpacing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FONT_WEIGHT_NUMBER_100 = 100;
    public const FONT_WEIGHT_NUMBER_200 = 200;
    public const FONT_WEIGHT_NUMBER_300 = 300;
    public const FONT_WEIGHT_NUMBER_400 = 400;
    public const FONT_WEIGHT_NUMBER_500 = 500;
    public const FONT_WEIGHT_NUMBER_600 = 600;
    public const FONT_WEIGHT_NUMBER_700 = 700;
    public const FONT_WEIGHT_NUMBER_800 = 800;
    public const FONT_WEIGHT_NUMBER_900 = 900;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFontWeightAllowableValues()
    {
        return [
            self::FONT_WEIGHT_NUMBER_100,
            self::FONT_WEIGHT_NUMBER_200,
            self::FONT_WEIGHT_NUMBER_300,
            self::FONT_WEIGHT_NUMBER_400,
            self::FONT_WEIGHT_NUMBER_500,
            self::FONT_WEIGHT_NUMBER_600,
            self::FONT_WEIGHT_NUMBER_700,
            self::FONT_WEIGHT_NUMBER_800,
            self::FONT_WEIGHT_NUMBER_900,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('font_size', $data ?? [], 16);
        $this->setIfExists('font_weight', $data ?? [], self::FONT_WEIGHT_NUMBER_400);
        $this->setIfExists('font_color', $data ?? [], '#FFFFFF');
        $this->setIfExists('font_style', $data ?? [], null);
        $this->setIfExists('text_decoration', $data ?? [], null);
        $this->setIfExists('letter_spacing', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFontWeightAllowableValues();
        if (!is_null($this->container['font_weight']) && !in_array($this->container['font_weight'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'font_weight', must be one of '%s'",
                $this->container['font_weight'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets font_family
     *
     * @return \KlaviyoAPI\Model\TextStyleFontFamily|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param \KlaviyoAPI\Model\TextStyleFontFamily|null $font_family font_family
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        if (is_null($font_family)) {
            throw new \InvalidArgumentException('non-nullable font_family cannot be null');
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return int|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param int|null $font_size font_size
     *
     * @return self
     */
    public function setFontSize($font_size)
    {
        if (is_null($font_size)) {
            throw new \InvalidArgumentException('non-nullable font_size cannot be null');
        }
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return int|null
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param int|null $font_weight Font weight enumeration.
     *
     * @return self
     */
    public function setFontWeight($font_weight)
    {
        if (is_null($font_weight)) {
            throw new \InvalidArgumentException('non-nullable font_weight cannot be null');
        }
        $allowedValues = $this->getFontWeightAllowableValues();
        if (!in_array($font_weight, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'font_weight', must be one of '%s'",
                    $font_weight,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets font_color
     *
     * @return string|null
     */
    public function getFontColor()
    {
        return $this->container['font_color'];
    }

    /**
     * Sets font_color
     *
     * @param string|null $font_color font_color
     *
     * @return self
     */
    public function setFontColor($font_color)
    {
        if (is_null($font_color)) {
            throw new \InvalidArgumentException('non-nullable font_color cannot be null');
        }
        $this->container['font_color'] = $font_color;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return string|null
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param string|null $font_style font_style
     *
     * @return self
     */
    public function setFontStyle($font_style)
    {
        if (is_null($font_style)) {
            array_push($this->openAPINullablesSetToNull, 'font_style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font_style', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets text_decoration
     *
     * @return string|null
     */
    public function getTextDecoration()
    {
        return $this->container['text_decoration'];
    }

    /**
     * Sets text_decoration
     *
     * @param string|null $text_decoration text_decoration
     *
     * @return self
     */
    public function setTextDecoration($text_decoration)
    {
        if (is_null($text_decoration)) {
            array_push($this->openAPINullablesSetToNull, 'text_decoration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_decoration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text_decoration'] = $text_decoration;

        return $this;
    }

    /**
     * Gets letter_spacing
     *
     * @return int|null
     */
    public function getLetterSpacing()
    {
        return $this->container['letter_spacing'];
    }

    /**
     * Sets letter_spacing
     *
     * @param int|null $letter_spacing letter_spacing
     *
     * @return self
     */
    public function setLetterSpacing($letter_spacing)
    {
        if (is_null($letter_spacing)) {
            throw new \InvalidArgumentException('non-nullable letter_spacing cannot be null');
        }
        $this->container['letter_spacing'] = $letter_spacing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


