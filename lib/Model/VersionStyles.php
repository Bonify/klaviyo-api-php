<?php
/**
 * VersionStyles
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * VersionStyles Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VersionStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VersionStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'wrap_content' => 'bool',
        'border_styles' => '\KlaviyoAPI\Model\BorderStyle',
        'close_button' => '\KlaviyoAPI\Model\CloseButtonStyle',
        'margin' => '\KlaviyoAPI\Model\Margin',
        'padding' => '\KlaviyoAPI\Model\Padding',
        'minimum_height' => 'int',
        'width' => 'string',
        'custom_width' => 'int',
        'background_image' => '\KlaviyoAPI\Model\BackgroundImage',
        'background_color' => 'string',
        'input_styles' => '\KlaviyoAPI\Model\InputStyles',
        'drop_shadow' => '\KlaviyoAPI\Model\DropShadow',
        'overlay_color' => 'string',
        'rich_text_styles' => '\KlaviyoAPI\Model\RichTextStyles',
        'mobile_overlay' => '\KlaviyoAPI\Model\MobileOverlay',
        'banner_styles' => '\KlaviyoAPI\Model\BannerStyles'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'wrap_content' => null,
        'border_styles' => null,
        'close_button' => null,
        'margin' => null,
        'padding' => null,
        'minimum_height' => null,
        'width' => null,
        'custom_width' => null,
        'background_image' => null,
        'background_color' => null,
        'input_styles' => null,
        'drop_shadow' => null,
        'overlay_color' => null,
        'rich_text_styles' => null,
        'mobile_overlay' => null,
        'banner_styles' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'wrap_content' => false,
        'border_styles' => false,
        'close_button' => false,
        'margin' => false,
        'padding' => false,
        'minimum_height' => false,
        'width' => false,
        'custom_width' => true,
        'background_image' => false,
        'background_color' => true,
        'input_styles' => false,
        'drop_shadow' => false,
        'overlay_color' => false,
        'rich_text_styles' => false,
        'mobile_overlay' => false,
        'banner_styles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wrap_content' => 'wrap_content',
        'border_styles' => 'border_styles',
        'close_button' => 'close_button',
        'margin' => 'margin',
        'padding' => 'padding',
        'minimum_height' => 'minimum_height',
        'width' => 'width',
        'custom_width' => 'custom_width',
        'background_image' => 'background_image',
        'background_color' => 'background_color',
        'input_styles' => 'input_styles',
        'drop_shadow' => 'drop_shadow',
        'overlay_color' => 'overlay_color',
        'rich_text_styles' => 'rich_text_styles',
        'mobile_overlay' => 'mobile_overlay',
        'banner_styles' => 'banner_styles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wrap_content' => 'setWrapContent',
        'border_styles' => 'setBorderStyles',
        'close_button' => 'setCloseButton',
        'margin' => 'setMargin',
        'padding' => 'setPadding',
        'minimum_height' => 'setMinimumHeight',
        'width' => 'setWidth',
        'custom_width' => 'setCustomWidth',
        'background_image' => 'setBackgroundImage',
        'background_color' => 'setBackgroundColor',
        'input_styles' => 'setInputStyles',
        'drop_shadow' => 'setDropShadow',
        'overlay_color' => 'setOverlayColor',
        'rich_text_styles' => 'setRichTextStyles',
        'mobile_overlay' => 'setMobileOverlay',
        'banner_styles' => 'setBannerStyles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wrap_content' => 'getWrapContent',
        'border_styles' => 'getBorderStyles',
        'close_button' => 'getCloseButton',
        'margin' => 'getMargin',
        'padding' => 'getPadding',
        'minimum_height' => 'getMinimumHeight',
        'width' => 'getWidth',
        'custom_width' => 'getCustomWidth',
        'background_image' => 'getBackgroundImage',
        'background_color' => 'getBackgroundColor',
        'input_styles' => 'getInputStyles',
        'drop_shadow' => 'getDropShadow',
        'overlay_color' => 'getOverlayColor',
        'rich_text_styles' => 'getRichTextStyles',
        'mobile_overlay' => 'getMobileOverlay',
        'banner_styles' => 'getBannerStyles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WIDTH_CUSTOM = 'custom';
    public const WIDTH_LARGE = 'large';
    public const WIDTH_MEDIUM = 'medium';
    public const WIDTH_SMALL = 'small';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWidthAllowableValues()
    {
        return [
            self::WIDTH_CUSTOM,
            self::WIDTH_LARGE,
            self::WIDTH_MEDIUM,
            self::WIDTH_SMALL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('wrap_content', $data ?? [], false);
        $this->setIfExists('border_styles', $data ?? [], null);
        $this->setIfExists('close_button', $data ?? [], null);
        $this->setIfExists('margin', $data ?? [], null);
        $this->setIfExists('padding', $data ?? [], null);
        $this->setIfExists('minimum_height', $data ?? [], 250);
        $this->setIfExists('width', $data ?? [], 'medium');
        $this->setIfExists('custom_width', $data ?? [], null);
        $this->setIfExists('background_image', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], '#FFFFFF');
        $this->setIfExists('input_styles', $data ?? [], null);
        $this->setIfExists('drop_shadow', $data ?? [], null);
        $this->setIfExists('overlay_color', $data ?? [], 'rgba(20,20,20,0.6)');
        $this->setIfExists('rich_text_styles', $data ?? [], null);
        $this->setIfExists('mobile_overlay', $data ?? [], null);
        $this->setIfExists('banner_styles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWidthAllowableValues();
        if (!is_null($this->container['width']) && !in_array($this->container['width'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'width', must be one of '%s'",
                $this->container['width'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wrap_content
     *
     * @return bool|null
     */
    public function getWrapContent()
    {
        return $this->container['wrap_content'];
    }

    /**
     * Sets wrap_content
     *
     * @param bool|null $wrap_content wrap_content
     *
     * @return self
     */
    public function setWrapContent($wrap_content)
    {
        if (is_null($wrap_content)) {
            throw new \InvalidArgumentException('non-nullable wrap_content cannot be null');
        }
        $this->container['wrap_content'] = $wrap_content;

        return $this;
    }

    /**
     * Gets border_styles
     *
     * @return \KlaviyoAPI\Model\BorderStyle|null
     */
    public function getBorderStyles()
    {
        return $this->container['border_styles'];
    }

    /**
     * Sets border_styles
     *
     * @param \KlaviyoAPI\Model\BorderStyle|null $border_styles border_styles
     *
     * @return self
     */
    public function setBorderStyles($border_styles)
    {
        if (is_null($border_styles)) {
            throw new \InvalidArgumentException('non-nullable border_styles cannot be null');
        }
        $this->container['border_styles'] = $border_styles;

        return $this;
    }

    /**
     * Gets close_button
     *
     * @return \KlaviyoAPI\Model\CloseButtonStyle|null
     */
    public function getCloseButton()
    {
        return $this->container['close_button'];
    }

    /**
     * Sets close_button
     *
     * @param \KlaviyoAPI\Model\CloseButtonStyle|null $close_button close_button
     *
     * @return self
     */
    public function setCloseButton($close_button)
    {
        if (is_null($close_button)) {
            throw new \InvalidArgumentException('non-nullable close_button cannot be null');
        }
        $this->container['close_button'] = $close_button;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return \KlaviyoAPI\Model\Margin|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param \KlaviyoAPI\Model\Margin|null $margin margin
     *
     * @return self
     */
    public function setMargin($margin)
    {
        if (is_null($margin)) {
            throw new \InvalidArgumentException('non-nullable margin cannot be null');
        }
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets padding
     *
     * @return \KlaviyoAPI\Model\Padding|null
     */
    public function getPadding()
    {
        return $this->container['padding'];
    }

    /**
     * Sets padding
     *
     * @param \KlaviyoAPI\Model\Padding|null $padding padding
     *
     * @return self
     */
    public function setPadding($padding)
    {
        if (is_null($padding)) {
            throw new \InvalidArgumentException('non-nullable padding cannot be null');
        }
        $this->container['padding'] = $padding;

        return $this;
    }

    /**
     * Gets minimum_height
     *
     * @return int|null
     */
    public function getMinimumHeight()
    {
        return $this->container['minimum_height'];
    }

    /**
     * Sets minimum_height
     *
     * @param int|null $minimum_height minimum_height
     *
     * @return self
     */
    public function setMinimumHeight($minimum_height)
    {
        if (is_null($minimum_height)) {
            throw new \InvalidArgumentException('non-nullable minimum_height cannot be null');
        }
        $this->container['minimum_height'] = $minimum_height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width Version width enumeration.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $allowedValues = $this->getWidthAllowableValues();
        if (!in_array($width, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'width', must be one of '%s'",
                    $width,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets custom_width
     *
     * @return int|null
     */
    public function getCustomWidth()
    {
        return $this->container['custom_width'];
    }

    /**
     * Sets custom_width
     *
     * @param int|null $custom_width custom_width
     *
     * @return self
     */
    public function setCustomWidth($custom_width)
    {
        if (is_null($custom_width)) {
            array_push($this->openAPINullablesSetToNull, 'custom_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_width'] = $custom_width;

        return $this;
    }

    /**
     * Gets background_image
     *
     * @return \KlaviyoAPI\Model\BackgroundImage|null
     */
    public function getBackgroundImage()
    {
        return $this->container['background_image'];
    }

    /**
     * Sets background_image
     *
     * @param \KlaviyoAPI\Model\BackgroundImage|null $background_image background_image
     *
     * @return self
     */
    public function setBackgroundImage($background_image)
    {
        if (is_null($background_image)) {
            throw new \InvalidArgumentException('non-nullable background_image cannot be null');
        }
        $this->container['background_image'] = $background_image;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets input_styles
     *
     * @return \KlaviyoAPI\Model\InputStyles|null
     */
    public function getInputStyles()
    {
        return $this->container['input_styles'];
    }

    /**
     * Sets input_styles
     *
     * @param \KlaviyoAPI\Model\InputStyles|null $input_styles input_styles
     *
     * @return self
     */
    public function setInputStyles($input_styles)
    {
        if (is_null($input_styles)) {
            throw new \InvalidArgumentException('non-nullable input_styles cannot be null');
        }
        $this->container['input_styles'] = $input_styles;

        return $this;
    }

    /**
     * Gets drop_shadow
     *
     * @return \KlaviyoAPI\Model\DropShadow|null
     */
    public function getDropShadow()
    {
        return $this->container['drop_shadow'];
    }

    /**
     * Sets drop_shadow
     *
     * @param \KlaviyoAPI\Model\DropShadow|null $drop_shadow drop_shadow
     *
     * @return self
     */
    public function setDropShadow($drop_shadow)
    {
        if (is_null($drop_shadow)) {
            throw new \InvalidArgumentException('non-nullable drop_shadow cannot be null');
        }
        $this->container['drop_shadow'] = $drop_shadow;

        return $this;
    }

    /**
     * Gets overlay_color
     *
     * @return string|null
     */
    public function getOverlayColor()
    {
        return $this->container['overlay_color'];
    }

    /**
     * Sets overlay_color
     *
     * @param string|null $overlay_color overlay_color
     *
     * @return self
     */
    public function setOverlayColor($overlay_color)
    {
        if (is_null($overlay_color)) {
            throw new \InvalidArgumentException('non-nullable overlay_color cannot be null');
        }
        $this->container['overlay_color'] = $overlay_color;

        return $this;
    }

    /**
     * Gets rich_text_styles
     *
     * @return \KlaviyoAPI\Model\RichTextStyles|null
     */
    public function getRichTextStyles()
    {
        return $this->container['rich_text_styles'];
    }

    /**
     * Sets rich_text_styles
     *
     * @param \KlaviyoAPI\Model\RichTextStyles|null $rich_text_styles rich_text_styles
     *
     * @return self
     */
    public function setRichTextStyles($rich_text_styles)
    {
        if (is_null($rich_text_styles)) {
            throw new \InvalidArgumentException('non-nullable rich_text_styles cannot be null');
        }
        $this->container['rich_text_styles'] = $rich_text_styles;

        return $this;
    }

    /**
     * Gets mobile_overlay
     *
     * @return \KlaviyoAPI\Model\MobileOverlay|null
     */
    public function getMobileOverlay()
    {
        return $this->container['mobile_overlay'];
    }

    /**
     * Sets mobile_overlay
     *
     * @param \KlaviyoAPI\Model\MobileOverlay|null $mobile_overlay mobile_overlay
     *
     * @return self
     */
    public function setMobileOverlay($mobile_overlay)
    {
        if (is_null($mobile_overlay)) {
            throw new \InvalidArgumentException('non-nullable mobile_overlay cannot be null');
        }
        $this->container['mobile_overlay'] = $mobile_overlay;

        return $this;
    }

    /**
     * Gets banner_styles
     *
     * @return \KlaviyoAPI\Model\BannerStyles|null
     */
    public function getBannerStyles()
    {
        return $this->container['banner_styles'];
    }

    /**
     * Sets banner_styles
     *
     * @param \KlaviyoAPI\Model\BannerStyles|null $banner_styles banner_styles
     *
     * @return self
     */
    public function setBannerStyles($banner_styles)
    {
        if (is_null($banner_styles)) {
            throw new \InvalidArgumentException('non-nullable banner_styles cannot be null');
        }
        $this->container['banner_styles'] = $banner_styles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


