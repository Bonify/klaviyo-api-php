<?php
/**
 * BannerStyles
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * BannerStyles Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BannerStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BannerStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'desktop_position' => 'string',
        'mobile_position' => 'string',
        'scroll_with_page' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'desktop_position' => null,
        'mobile_position' => null,
        'scroll_with_page' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'desktop_position' => false,
        'mobile_position' => false,
        'scroll_with_page' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'desktop_position' => 'desktop_position',
        'mobile_position' => 'mobile_position',
        'scroll_with_page' => 'scroll_with_page'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'desktop_position' => 'setDesktopPosition',
        'mobile_position' => 'setMobilePosition',
        'scroll_with_page' => 'setScrollWithPage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'desktop_position' => 'getDesktopPosition',
        'mobile_position' => 'getMobilePosition',
        'scroll_with_page' => 'getScrollWithPage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DESKTOP_POSITION_BOTTOM = 'bottom';
    public const DESKTOP_POSITION_TOP = 'top';
    public const MOBILE_POSITION_BOTTOM = 'bottom';
    public const MOBILE_POSITION_TOP = 'top';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDesktopPositionAllowableValues()
    {
        return [
            self::DESKTOP_POSITION_BOTTOM,
            self::DESKTOP_POSITION_TOP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMobilePositionAllowableValues()
    {
        return [
            self::MOBILE_POSITION_BOTTOM,
            self::MOBILE_POSITION_TOP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('desktop_position', $data ?? [], 'top');
        $this->setIfExists('mobile_position', $data ?? [], 'top');
        $this->setIfExists('scroll_with_page', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDesktopPositionAllowableValues();
        if (!is_null($this->container['desktop_position']) && !in_array($this->container['desktop_position'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'desktop_position', must be one of '%s'",
                $this->container['desktop_position'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMobilePositionAllowableValues();
        if (!is_null($this->container['mobile_position']) && !in_array($this->container['mobile_position'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mobile_position', must be one of '%s'",
                $this->container['mobile_position'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets desktop_position
     *
     * @return string|null
     */
    public function getDesktopPosition()
    {
        return $this->container['desktop_position'];
    }

    /**
     * Sets desktop_position
     *
     * @param string|null $desktop_position Positioning of banner forms.
     *
     * @return self
     */
    public function setDesktopPosition($desktop_position)
    {
        if (is_null($desktop_position)) {
            throw new \InvalidArgumentException('non-nullable desktop_position cannot be null');
        }
        $allowedValues = $this->getDesktopPositionAllowableValues();
        if (!in_array($desktop_position, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'desktop_position', must be one of '%s'",
                    $desktop_position,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['desktop_position'] = $desktop_position;

        return $this;
    }

    /**
     * Gets mobile_position
     *
     * @return string|null
     */
    public function getMobilePosition()
    {
        return $this->container['mobile_position'];
    }

    /**
     * Sets mobile_position
     *
     * @param string|null $mobile_position Positioning of banner forms.
     *
     * @return self
     */
    public function setMobilePosition($mobile_position)
    {
        if (is_null($mobile_position)) {
            throw new \InvalidArgumentException('non-nullable mobile_position cannot be null');
        }
        $allowedValues = $this->getMobilePositionAllowableValues();
        if (!in_array($mobile_position, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mobile_position', must be one of '%s'",
                    $mobile_position,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mobile_position'] = $mobile_position;

        return $this;
    }

    /**
     * Gets scroll_with_page
     *
     * @return bool|null
     */
    public function getScrollWithPage()
    {
        return $this->container['scroll_with_page'];
    }

    /**
     * Sets scroll_with_page
     *
     * @param bool|null $scroll_with_page scroll_with_page
     *
     * @return self
     */
    public function setScrollWithPage($scroll_with_page)
    {
        if (is_null($scroll_with_page)) {
            throw new \InvalidArgumentException('non-nullable scroll_with_page cannot be null');
        }
        $this->container['scroll_with_page'] = $scroll_with_page;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


