<?php
/**
 * VersionProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * VersionProperties Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VersionProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VersionProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'side_image_settings' => '\KlaviyoAPI\Model\SideImageSettings',
        'click_outside_to_close' => 'string[]',
        'rule_based_trigger_evaluation' => 'string',
        'record_utm_params_on_submit' => 'bool',
        'show_close_button' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'side_image_settings' => null,
        'click_outside_to_close' => null,
        'rule_based_trigger_evaluation' => null,
        'record_utm_params_on_submit' => null,
        'show_close_button' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'side_image_settings' => false,
        'click_outside_to_close' => true,
        'rule_based_trigger_evaluation' => true,
        'record_utm_params_on_submit' => false,
        'show_close_button' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'side_image_settings' => 'side_image_settings',
        'click_outside_to_close' => 'click_outside_to_close',
        'rule_based_trigger_evaluation' => 'rule_based_trigger_evaluation',
        'record_utm_params_on_submit' => 'record_utm_params_on_submit',
        'show_close_button' => 'show_close_button'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'side_image_settings' => 'setSideImageSettings',
        'click_outside_to_close' => 'setClickOutsideToClose',
        'rule_based_trigger_evaluation' => 'setRuleBasedTriggerEvaluation',
        'record_utm_params_on_submit' => 'setRecordUtmParamsOnSubmit',
        'show_close_button' => 'setShowCloseButton'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'side_image_settings' => 'getSideImageSettings',
        'click_outside_to_close' => 'getClickOutsideToClose',
        'rule_based_trigger_evaluation' => 'getRuleBasedTriggerEvaluation',
        'record_utm_params_on_submit' => 'getRecordUtmParamsOnSubmit',
        'show_close_button' => 'getShowCloseButton'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CLICK_OUTSIDE_TO_CLOSE_BOTH = 'both';
    public const CLICK_OUTSIDE_TO_CLOSE_DESKTOP = 'desktop';
    public const CLICK_OUTSIDE_TO_CLOSE_MOBILE = 'mobile';
    public const RULE_BASED_TRIGGER_EVALUATION_ALL = 'all';
    public const RULE_BASED_TRIGGER_EVALUATION_ANY = 'any';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClickOutsideToCloseAllowableValues()
    {
        return [
            self::CLICK_OUTSIDE_TO_CLOSE_BOTH,
            self::CLICK_OUTSIDE_TO_CLOSE_DESKTOP,
            self::CLICK_OUTSIDE_TO_CLOSE_MOBILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRuleBasedTriggerEvaluationAllowableValues()
    {
        return [
            self::RULE_BASED_TRIGGER_EVALUATION_ALL,
            self::RULE_BASED_TRIGGER_EVALUATION_ANY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('side_image_settings', $data ?? [], null);
        $this->setIfExists('click_outside_to_close', $data ?? [], null);
        $this->setIfExists('rule_based_trigger_evaluation', $data ?? [], 'any');
        $this->setIfExists('record_utm_params_on_submit', $data ?? [], false);
        $this->setIfExists('show_close_button', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRuleBasedTriggerEvaluationAllowableValues();
        if (!is_null($this->container['rule_based_trigger_evaluation']) && !in_array($this->container['rule_based_trigger_evaluation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rule_based_trigger_evaluation', must be one of '%s'",
                $this->container['rule_based_trigger_evaluation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets side_image_settings
     *
     * @return \KlaviyoAPI\Model\SideImageSettings|null
     */
    public function getSideImageSettings()
    {
        return $this->container['side_image_settings'];
    }

    /**
     * Sets side_image_settings
     *
     * @param \KlaviyoAPI\Model\SideImageSettings|null $side_image_settings side_image_settings
     *
     * @return self
     */
    public function setSideImageSettings($side_image_settings)
    {
        if (is_null($side_image_settings)) {
            throw new \InvalidArgumentException('non-nullable side_image_settings cannot be null');
        }
        $this->container['side_image_settings'] = $side_image_settings;

        return $this;
    }

    /**
     * Gets click_outside_to_close
     *
     * @return string[]|null
     */
    public function getClickOutsideToClose()
    {
        return $this->container['click_outside_to_close'];
    }

    /**
     * Sets click_outside_to_close
     *
     * @param string[]|null $click_outside_to_close click_outside_to_close
     *
     * @return self
     */
    public function setClickOutsideToClose($click_outside_to_close)
    {
        if (is_null($click_outside_to_close)) {
            array_push($this->openAPINullablesSetToNull, 'click_outside_to_close');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('click_outside_to_close', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getClickOutsideToCloseAllowableValues();
        if (!is_null($click_outside_to_close) && array_diff($click_outside_to_close, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'click_outside_to_close', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['click_outside_to_close'] = $click_outside_to_close;

        return $this;
    }

    /**
     * Gets rule_based_trigger_evaluation
     *
     * @return string|null
     */
    public function getRuleBasedTriggerEvaluation()
    {
        return $this->container['rule_based_trigger_evaluation'];
    }

    /**
     * Sets rule_based_trigger_evaluation
     *
     * @param string|null $rule_based_trigger_evaluation Side image alignment enumeration.
     *
     * @return self
     */
    public function setRuleBasedTriggerEvaluation($rule_based_trigger_evaluation)
    {
        if (is_null($rule_based_trigger_evaluation)) {
            array_push($this->openAPINullablesSetToNull, 'rule_based_trigger_evaluation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_based_trigger_evaluation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRuleBasedTriggerEvaluationAllowableValues();
        if (!is_null($rule_based_trigger_evaluation) && !in_array($rule_based_trigger_evaluation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rule_based_trigger_evaluation', must be one of '%s'",
                    $rule_based_trigger_evaluation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rule_based_trigger_evaluation'] = $rule_based_trigger_evaluation;

        return $this;
    }

    /**
     * Gets record_utm_params_on_submit
     *
     * @return bool|null
     */
    public function getRecordUtmParamsOnSubmit()
    {
        return $this->container['record_utm_params_on_submit'];
    }

    /**
     * Sets record_utm_params_on_submit
     *
     * @param bool|null $record_utm_params_on_submit record_utm_params_on_submit
     *
     * @return self
     */
    public function setRecordUtmParamsOnSubmit($record_utm_params_on_submit)
    {
        if (is_null($record_utm_params_on_submit)) {
            throw new \InvalidArgumentException('non-nullable record_utm_params_on_submit cannot be null');
        }
        $this->container['record_utm_params_on_submit'] = $record_utm_params_on_submit;

        return $this;
    }

    /**
     * Gets show_close_button
     *
     * @return bool|null
     */
    public function getShowCloseButton()
    {
        return $this->container['show_close_button'];
    }

    /**
     * Sets show_close_button
     *
     * @param bool|null $show_close_button show_close_button
     *
     * @return self
     */
    public function setShowCloseButton($show_close_button)
    {
        if (is_null($show_close_button)) {
            throw new \InvalidArgumentException('non-nullable show_close_button cannot be null');
        }
        $this->container['show_close_button'] = $show_close_button;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


