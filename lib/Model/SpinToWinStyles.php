<?php
/**
 * SpinToWinStyles
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * SpinToWinStyles Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpinToWinStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpinToWinStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'padding' => '\KlaviyoAPI\Model\Padding',
        'background_color' => 'string',
        'slice_styles' => '\KlaviyoAPI\Model\SpinToWinSliceStyle[]',
        'text_styles' => '\KlaviyoAPI\Model\TextStyle',
        'center_color' => 'string',
        'outline_color' => 'string',
        'outline_thickness' => 'int',
        'pin_color' => 'string',
        'wheel_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'padding' => null,
        'background_color' => null,
        'slice_styles' => null,
        'text_styles' => null,
        'center_color' => null,
        'outline_color' => null,
        'outline_thickness' => null,
        'pin_color' => null,
        'wheel_size' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'padding' => false,
        'background_color' => true,
        'slice_styles' => false,
        'text_styles' => false,
        'center_color' => false,
        'outline_color' => false,
        'outline_thickness' => false,
        'pin_color' => false,
        'wheel_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'padding' => 'padding',
        'background_color' => 'background_color',
        'slice_styles' => 'slice_styles',
        'text_styles' => 'text_styles',
        'center_color' => 'center_color',
        'outline_color' => 'outline_color',
        'outline_thickness' => 'outline_thickness',
        'pin_color' => 'pin_color',
        'wheel_size' => 'wheel_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'padding' => 'setPadding',
        'background_color' => 'setBackgroundColor',
        'slice_styles' => 'setSliceStyles',
        'text_styles' => 'setTextStyles',
        'center_color' => 'setCenterColor',
        'outline_color' => 'setOutlineColor',
        'outline_thickness' => 'setOutlineThickness',
        'pin_color' => 'setPinColor',
        'wheel_size' => 'setWheelSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'padding' => 'getPadding',
        'background_color' => 'getBackgroundColor',
        'slice_styles' => 'getSliceStyles',
        'text_styles' => 'getTextStyles',
        'center_color' => 'getCenterColor',
        'outline_color' => 'getOutlineColor',
        'outline_thickness' => 'getOutlineThickness',
        'pin_color' => 'getPinColor',
        'wheel_size' => 'getWheelSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('padding', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('slice_styles', $data ?? [], null);
        $this->setIfExists('text_styles', $data ?? [], null);
        $this->setIfExists('center_color', $data ?? [], 'rgba(255,255,255,1)');
        $this->setIfExists('outline_color', $data ?? [], 'rgba(0,0,0,1)');
        $this->setIfExists('outline_thickness', $data ?? [], 12);
        $this->setIfExists('pin_color', $data ?? [], 'rgba(255,255,255,1)');
        $this->setIfExists('wheel_size', $data ?? [], 400);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets padding
     *
     * @return \KlaviyoAPI\Model\Padding|null
     */
    public function getPadding()
    {
        return $this->container['padding'];
    }

    /**
     * Sets padding
     *
     * @param \KlaviyoAPI\Model\Padding|null $padding padding
     *
     * @return self
     */
    public function setPadding($padding)
    {
        if (is_null($padding)) {
            throw new \InvalidArgumentException('non-nullable padding cannot be null');
        }
        $this->container['padding'] = $padding;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets slice_styles
     *
     * @return \KlaviyoAPI\Model\SpinToWinSliceStyle[]|null
     */
    public function getSliceStyles()
    {
        return $this->container['slice_styles'];
    }

    /**
     * Sets slice_styles
     *
     * @param \KlaviyoAPI\Model\SpinToWinSliceStyle[]|null $slice_styles slice_styles
     *
     * @return self
     */
    public function setSliceStyles($slice_styles)
    {
        if (is_null($slice_styles)) {
            throw new \InvalidArgumentException('non-nullable slice_styles cannot be null');
        }
        $this->container['slice_styles'] = $slice_styles;

        return $this;
    }

    /**
     * Gets text_styles
     *
     * @return \KlaviyoAPI\Model\TextStyle|null
     */
    public function getTextStyles()
    {
        return $this->container['text_styles'];
    }

    /**
     * Sets text_styles
     *
     * @param \KlaviyoAPI\Model\TextStyle|null $text_styles text_styles
     *
     * @return self
     */
    public function setTextStyles($text_styles)
    {
        if (is_null($text_styles)) {
            throw new \InvalidArgumentException('non-nullable text_styles cannot be null');
        }
        $this->container['text_styles'] = $text_styles;

        return $this;
    }

    /**
     * Gets center_color
     *
     * @return string|null
     */
    public function getCenterColor()
    {
        return $this->container['center_color'];
    }

    /**
     * Sets center_color
     *
     * @param string|null $center_color center_color
     *
     * @return self
     */
    public function setCenterColor($center_color)
    {
        if (is_null($center_color)) {
            throw new \InvalidArgumentException('non-nullable center_color cannot be null');
        }
        $this->container['center_color'] = $center_color;

        return $this;
    }

    /**
     * Gets outline_color
     *
     * @return string|null
     */
    public function getOutlineColor()
    {
        return $this->container['outline_color'];
    }

    /**
     * Sets outline_color
     *
     * @param string|null $outline_color outline_color
     *
     * @return self
     */
    public function setOutlineColor($outline_color)
    {
        if (is_null($outline_color)) {
            throw new \InvalidArgumentException('non-nullable outline_color cannot be null');
        }
        $this->container['outline_color'] = $outline_color;

        return $this;
    }

    /**
     * Gets outline_thickness
     *
     * @return int|null
     */
    public function getOutlineThickness()
    {
        return $this->container['outline_thickness'];
    }

    /**
     * Sets outline_thickness
     *
     * @param int|null $outline_thickness outline_thickness
     *
     * @return self
     */
    public function setOutlineThickness($outline_thickness)
    {
        if (is_null($outline_thickness)) {
            throw new \InvalidArgumentException('non-nullable outline_thickness cannot be null');
        }
        $this->container['outline_thickness'] = $outline_thickness;

        return $this;
    }

    /**
     * Gets pin_color
     *
     * @return string|null
     */
    public function getPinColor()
    {
        return $this->container['pin_color'];
    }

    /**
     * Sets pin_color
     *
     * @param string|null $pin_color pin_color
     *
     * @return self
     */
    public function setPinColor($pin_color)
    {
        if (is_null($pin_color)) {
            throw new \InvalidArgumentException('non-nullable pin_color cannot be null');
        }
        $this->container['pin_color'] = $pin_color;

        return $this;
    }

    /**
     * Gets wheel_size
     *
     * @return int|null
     */
    public function getWheelSize()
    {
        return $this->container['wheel_size'];
    }

    /**
     * Sets wheel_size
     *
     * @param int|null $wheel_size wheel_size
     *
     * @return self
     */
    public function setWheelSize($wheel_size)
    {
        if (is_null($wheel_size)) {
            throw new \InvalidArgumentException('non-nullable wheel_size cannot be null');
        }
        $this->container['wheel_size'] = $wheel_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


